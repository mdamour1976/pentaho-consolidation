<!--===========================================================================
    COMMON_BUILD.XML

    This is the build file that is used across all Pentaho projects that are
    using the "new and improved" ivy builds.

    This file contains the default implementation of the ant tasks to
    perform a build. This file should be included by the build.xml file
    for each project in the Pentaho system. That build file should
    redefine any task that is defined in this file IF AND ONLY IF the
    functioning of that task should be different for that specific
    project.

    NOTE: Any modification to this file should be viewed as a modification
          the EVERY common_build.xml file (and the change should be copied
          to all common_build.xml files that can be found)

    FORMATTING:
    	ALIGNMENT: indent=2 spaces and wrap lines longer than 120 chars
    	NAMING: targets intended for execution by a user are named single-word
    	        or hyphenated.  Internal targets use '.' notation.

    TO GET STARTED with your project, you will need this file in
          your project's root directory along with three additional files:
          1. build.xml
          2. build.properties
          3. ivy_settings.xml
          4. ivy.xml

          Below are some templates:

	    === build.xml
		<project name="MyProject" basedir="." default="jar" xmlns:ivy="antlib:org.apache.ivy.ant" >
			<description>
				This build file is used to create the MyProject project and works with the common_build.xml file.
			</description>

			<import file="common_build.xml"/>
		</project>

		=== build.properties
		project.revision=1.0-SNAPSHOT  #the version of your project.  This will appear in jar META-INF, dist artifact filenames and IVY revision metadata.
		ivy.artifact.id=my-project   #IVY metadata describing the name of the artifact
		impl.title=My Project #English language version of your project name

============================================================================-->

<project basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

  <!-- =================================================================================
	     Property Defaults
	     Any of these properties can be overridden in either build.properties or override.properties
	     =================================================================================-->

  <!-- Compile properties -->
  <property name="src.dir" value="${basedir}/src" description="Project source code directory" />
  <property name="bin.dir" value="${basedir}/bin" description="Base directory for all non-dist build output" />
  
  <property name="classes.dir"
            value="${bin.dir}/classes"
            description="Classes compiled from project source code are placed here" />
  <property name="lib.dir"
            value="${basedir}/lib"
            description="Directory that hosts Jar files required to compile project source.  (IVY will populate this directory with required jars)" />
  <property name="devlib.dir"
            value="${basedir}/dev-lib"
            description="Directory for developer to place development Jar files (not affected by clean targets)" />

  <!-- Build Cache properties -->
  <property name="build.cache.dir"
            value="${user.home}/.pentaho_build_cache"
            description="Base dir for runtime jars that are required exclusively by the build process" />
  <property name="tmp.build.cache.dir"
            value="${build.cache.dir}/tmp"
            description="Temporary directory where files are prepared for build cache" />
  <property name="ivy.build.cache.dir"
            value="${build.cache.dir}/ivy"
            description="Directory where the IVY jar is placed after it is auto downloaded by the build" />
  <property name="antcontrib.build.cache.dir"
            value="${build.cache.dir}/ant-contrib"
            description="Directory where the Ant-Contrib jar (and dependencies) is placed after it is auto-downloaded by the build" />
  <property name="pentaho.build.cache.dir"
            value="${build.cache.dir}/pentaho"
            description="Directory where the Pentaho ant tasks jar (and dependencies) is placed after it is auto-downloaded by the build" />
  <property name="svnant.build.cache.dir"
            value="${build.cache.dir}/svnant"
            description="Directory where the SVN ANT install is placed after it is auto downloaded by the build" />

  <!-- Compiler properties (passed directly to javac ant target) -->
  <property name="javac.debug"
            value="true"
            description="Indicates whether source should be compiled with debug information (passed to javac ant task)." />
  <property name="javac.deprecation"
            value="true"
            description="Indicates whether source should be compiled with deprecation information" />
  <property name="javac.source" value="1.5" description="Provide source compatibility with specified release" />
  <property name="javac.target" value="1.5" description="Generate class files for specific VM version" />

  <!-- Distribution and Assembly properties -->
  <property name="dist.dir"
            value="${basedir}/dist"
            description="Base directory for all project artifacts (jar, zip, tar.gz, etc...)" />
  <property name="license.dir"
            value="${basedir}"
            description="Base directory where this project's license files reside" />
  <property name="res.dir"
            value="${basedir}/res"
            description="Directory that holds resources not included in the source tree" />

  <!-- Ivy properties -->
  <property name="ivy.install.version" value="2.0.0-beta2" description="Specifies the version of IVY to fetch" />
  <property name="ivy.jar.file"
            value="${ivy.build.cache.dir}/ivybeta1.jar"
            description="The full path to the IVY jar file to use during the build.  If the file is not present, the build will attempt to fetch IVY and save the jar as specified by this property" />
  <property name="ivy.settingsurl"
            value="file:${basedir}/ivysettings.xml"
            description="URL to the (common) ivysettings.xml.  This file is required by the build to configure IVY.  Note you must escape the ':' if this property exists in a .properties file" />
  <property name="ivy.artifact.id"
            value=""
            description="IVY metadata providing a unique id for the artifact"/>
  <property name="ivy.artifact.group"
            value="pentaho"
            description="IVY metadata describing the originating company or organization" />
  <property name="ivy.artifact.pomfile"
            value="${dist.dir}/pom.xml"
            description="The path to the Maven pom file to deploy with the artifact" />
  <property name="ivy.artifact.ivyfilename"
            value="ivy.xml"
            description="The name of the IVY xml file to deploy with the artifact" />
  <property name="ivy.artifact.ivypathname"
            value="${dist.dir}/ivy.xml"
            description="The full path to the IVY xml file to deploy with the artifact" />

  <!-- Build Mode properties -->
  <property name="project.revision" value="UNDEFINED" description="Set this to the revision version number" />

  <!-- Set the os property -->
  <condition property="isLinux">
    <os family="unix" />
  </condition>
  <condition property="isWindows">
    <os family="windows" />
  </condition>
  <condition property="isMac">
    <os family="mac" />
  </condition>

  <condition property="os.classifier" value="win">
    <os family="windows" />
  </condition>
  <condition property="os.classifier" value="mac">
    <os family="mac" />
  </condition>
  <condition property="os.classifier" value="linux">
    <os family="unix" />
  </condition>
  <property name="os.classifier" value="unsupported" />



  <!-- Setup the classpath used for testing -->
  <path id="classpath">
    <fileset dir="${lib.dir}">
      <include name="*.jar" />
    </fileset>
    <dirset dir="${classes.dir}" />
  </path>

  <tstamp/>

  <!--=======================================================================
	    install-antcontrib

	    (Fetches and) installs ant-contrib tasks.
	    ====================================================================-->
  <target name="install-antcontrib"
          depends="antcontrib.download-check"
          description="Fetch ant-contrib jar and install ant tasks">
    <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
        <fileset dir="${antcontrib.build.cache.dir}">
          <include name="*.jar" />
        </fileset>
      </classpath>
    </taskdef>
  </target>


  <!--=======================================================================
	    antcontrib.download-check

	    Fetches ant-contrib from sourceforge if it is not already present
	    ====================================================================-->
  <target name="antcontrib.download-check">
    <condition property="antcontrib.available">
      <and>
        <available file="${antcontrib.build.cache.dir}" />
        <available classname="net.sf.antcontrib.logic.IfTask">
          <classpath>
            <fileset dir="${antcontrib.build.cache.dir}">
              <include name="*.jar" />
            </fileset>
          </classpath>
        </available>
      </and>
    </condition>
    <antcall target="antcontrib.download" />
  </target>


  <!--=======================================================================
	    antcontrib.download

	    Fetches ant-contrib from sourceforge
	    ====================================================================-->
  <target name="antcontrib.download" unless="antcontrib.available">
    <mkdir dir="${tmp.build.cache.dir}" />
    <get src="http://downloads.sourceforge.net/ant-contrib/ant-contrib-1.0b3-bin.zip"
         dest="${tmp.build.cache.dir}/antcontrib.zip"
         usetimestamp="true" />
    <unzip src="${tmp.build.cache.dir}/antcontrib.zip" dest="${tmp.build.cache.dir}">
      <patternset>
        <include name="**/*.jar" />
      </patternset>
    </unzip>
    <copy todir="${antcontrib.build.cache.dir}">
      <fileset dir="${tmp.build.cache.dir}/ant-contrib">
        <include name="**/*.jar" />
      </fileset>
    </copy>
  </target>

  <!--=======================================================================
	    install-ivy

	    (Fetches and) installs the IVY jar for use by this ant script
	    ====================================================================-->
  <target name="install-ivy"
          depends="install-antcontrib,ivy.download-check"
          description="Installs IVY tasks for use by this build process">
    <if>
      <istrue value="${ivy.isinstalled}" />
      <then>
        <echo message="Skipping IVY install.  IVY has already been configured by the build" />
      </then>
      <else>
        <echo message="Installing IVY..." />
        <path id="ivy.lib.path">
          <fileset dir="${ivy.build.cache.dir}" includes="*.jar" />
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
        <ivy:settings url="${ivy.settingsurl}" />
        <property name="ivy.isinstalled" value="true" />
      </else>
    </if>
  </target>


  <!--=======================================================================
	    ivy.download-check

	    Fetch IVY jar from sourceforge if it is not already present
	    ====================================================================-->
  <target name="ivy.download-check">
    <condition property="ivy.available">
      <and>
        <available file="${ivy.build.cache.dir}" />
        <available classname="org.apache.ivy.ant.IvyTask">
          <classpath>
            <fileset dir="${ivy.build.cache.dir}">
              <include name="*.jar" />
            </fileset>
          </classpath>
        </available>
      </and>
    </condition>
    <antcall target="ivy.download" />
  </target>


  <!--=======================================================================
	    ivy.download

	    Downloads the IVY jar file for use by ant.
	    ====================================================================-->
  <target name="ivy.download" unless="ivy.available">
    <mkdir dir="${ivy.build.cache.dir}" />
    <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
         dest="${ivy.jar.file}"
         usetimestamp="true" />
  </target>


  <!--=======================================================================
	    resolve

	    Using ivy and the dependencies for the project (defined in the ivy.xml
	    file), this task will retrieve the needed files and place them into
	    the defined directories.
	    ====================================================================-->
  <target name="resolve" depends="resolve-default, resolve-test" description="Retrieves all the dependent libraries" />

  <target name="resolve-init" unless="resolve-init.skip" depends="install-ivy">
    <!-- If this is the 1st time through resolve-init, then we need to clean up the jars -->
    <antcall target="clean-jars" />
    <property name="resolve-init.skip" value="" />
  </target>

  <target name="resolve-default" depends="resolve-init" description="Retrieves default configuration dependencies">
    <ivy:resolve file="ivy.xml" conf="default" />
    <ivy:retrieve conf="default" pattern="${lib.dir}/[module]-[revision](-[classifier]).[ext]" />
  </target>

  <target name="resolve-test" depends="resolve-init" description="Retrieves test configuration dependencies">
    <ivy:resolve file="ivy.xml" conf="test" />
    <ivy:retrieve conf="test" pattern="${testlib.dir}/[module]-[revision](-[classifier]).[ext]" />
  </target>

  <target name="resolve-codegen" depends="resolve-init">
    <ivy:resolve file="ivy.xml" conf="codegen" />
    <ivy:retrieve conf="codegen" pattern="${lib.dir}/[module]-[revision](-[classifier]).[ext]" />
  </target>

  <target name="resolve-runtime" depends="resolve-init">
    <ivy:resolve file="ivy.xml" conf="runtime" />
    <ivy:retrieve conf="runtime" pattern="${lib.dir}/[module]-[revision](-[classifier]).[ext]" />
  </target>


  <!--=======================================================================
	    ivy-clean-cache

	    Cleans the IVY cache.  You are erasing IVY's memory.  Run this if you
	    want to force IVY to go fetch all your project dependencies from scratch.
	    WARNING: this will affect all IVY projects, not just the current workspace
	    ====================================================================-->
  <target name="ivy-clean-cache" depends="install-ivy" description="Cleans the IVY cache">
    <ivy:cleancache />
  </target>


  <!--=======================================================================
	    ivy-clean-local

	    Completely cleans your local repository of any files published locally
	    by way of publish-local.
	    WARNING: this is a global action and will affect other IVY projects
	    currently referencing a locally published dependency
	    ====================================================================-->
  <target name="ivy-clean-local" depends="install-ivy" description="cleans the local repository for the current module">
    <delete dir="${ivy.local.default.root}/" />
  </target>


  <!--=======================================================================
	    report

	    Allows ivy to report on the dependencies for this project
	    ====================================================================-->
  <target name="report" depends="install-ivy" description="Uses IVY to report on the dependency information">
    <ivy:resolve file="ivy.xml" />
    <ivy:report conf="default" />
  </target>

  <macrodef name="ivy-report">
    <attribute name="property-name" description="The property that will receive the result."/>
    <attribute name="class-name" description="The class to test for"/>
    <element name="test-classpath" optional="true" description="The classpath used for the testing"/>
    <sequential>
      <condition property="@{property-name}">
        <available classname="@{class-name}">
          <classpath>
            <test-classpath/>
          </classpath>
        </available>
      </condition>
    </sequential>
  </macrodef>

  
</project>