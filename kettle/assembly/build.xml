<!-- In order for this build file to be referenced by name on import into other build files, 
     it's much nicer to have a short name with no spaces. Please don't change it. -->
<project name="Kettle CE Assembly" basedir="." default="dist" xmlns:ivy="antlib:org.apache.ivy.ant">

  <!-- =================================================================================
       Property Defaults
       Any of these properties can be overridden in either assembly.properties or override.properties
       =================================================================================-->

  <!-- Load the properties files in the proper order -->
  <property file="override.properties"
            description="Properties customized for your development environment belong in this file.  This file will never be checked into the SCM." />
  <property file="build.properties"
            description="Properties customized for your particular project belong in this file." />
  
  <!-- the impl properties are used to create the manifest file -->
  <property name="impl.title" value="Kettle" />
  <property name="impl.version" value="${project.revision}" />
  <property name="impl.vendor" value="Pentaho Corporation" />

  <import file="build-res/subfloor-pkg.xml" />

  <target name="dist" depends="init,build-subprojects,resolve,resolve-swtlibs,resolve-launcher,package" description="Builds and packages the application"/>
  	
	<target name="assemble-full" depends="init,build-subprojects,resolve,resolve-swtlibs,resolve-launcher,assemble" description="Builds the application" />

	
  <target name="assemble" depends="subfloor-pkg.assemble" description="copy jar files to distribution directory" >
  	<echo>Construct the distribution package...</echo>
    <!-- make JavaApplicationStub executable for OSX -->
    <chmod file="${approot.stage.dir}/Data Integration 32-bit.app/Contents/MacOS/JavaApplicationStub" perm="ugo+rx"/>
    <chmod file="${approot.stage.dir}/Data Integration 64-bit.app/Contents/MacOS/JavaApplicationStub" perm="ugo+rx"/>
  	
    <!-- Unzip the libswt package into the libswt folder of the distribution -->
    <unzip dest="${stage.dir}/${package.root.dir}" overwrite="true">
      <fileset dir="${swtlib.dir}">
        <include name="**/*.zip"/>
      </fileset>
    </unzip>
  	
  	<!-- Insert launcher revision number into batch files -->
    <replace dir="${stage.dir}/${package.root.dir}">
      <include name="**/*.bat"/>
    	<include name="**/*.sh"/>
    	<include name="**/*.plist"/>
      <replacefilter token="launcher.jar" value="launcher-${launcher.revision}.jar"/>     
    </replace>
  	
  </target>
	
	<!--=======================================================================
	      build-subprojects
	      
	      Builds all sub-projects (modules, plugins, etc.) of the Kettle assembly 
	    ====================================================================-->
  <target name="build-subprojects" 
  	        description="Builds all sub-projects (modules, plugins, etc.) of the Kettle assembly"
            depends="clean-all, build-publish-modules, build-publish-plugins" />
	
	<target name="build-publish-modules"
	          description="Builds each Kettle module and publishes the artifacts."
	          depends="install-antcontrib">
	    <for list="${module.list}" param="module" trim="true">
	      <sequential>
	        <ant antfile="build.xml" dir="../@{module}" inheritall="false" >
	          <target name="clean" />
	          <target name="init" />
	          <target name="resolve" />
	        	<target name="dist" />
	          <target name="publish-local" />
	        </ant>
	      </sequential>
	    </for>
	  </target>
	
	<target name="build-publish-plugins"
          description="Builds each Kettle plugin (in the source tree) and publishes the artifacts."
          depends="install-antcontrib">
    <for list="${plugin.list}" param="plugin" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="../plugins/@{plugin}" inheritall="false" >
          <target name="clean" />
          <target name="init" />
          <target name="resolve" />
        	<target name="dist" />
        </ant>
      </sequential>
    </for>
    <antcall target="publish-local-plugins"/>
  </target>
  	
	<target name="publish-local-plugins" depends="install-antcontrib">
    <for list="${plugin.list}" param="module" trim="true">
      <sequential>
        <!-- publish jar -->
        <antcall target="publish-local-plugin-task">
          <param name="ivy.artifact.id" value="@{module}" />
          <param name="pluginfolder" value="../plugins/@{module}"/>
          <param name="artifact.type" value="jar"/>
        </antcall>
      </sequential>
    </for>
  </target>
    
  <target name="publish-local-plugin-task" depends="install-ivy">
    <copy overwrite="true" file="${pluginfolder}/ivy.xml" tofile="${pluginfolder}/dist/ivy-${artifact.type}.xml"/>
    <ivy:resolve file="${pluginfolder}/dist/ivy-${artifact.type}.xml" />
    <ivy:publish resolver="local" srcivypattern="${pluginfolder}/ivy-${artifact.type}.xml" pubrevision="${project.revision}" overwrite="true" forcedeliver="true">
      <artifacts pattern="${pluginfolder}/dist/[artifact]-[revision].[ext]" />
    </ivy:publish>
  </target>
	<!--=======================================================================
	        resolve-swtlibs
	        
	        Resolved the swtlibs configuration from ivy.xml
	    =====================================================================-->
	  <target name="resolve-swtlibs" depends="install-ivy">
	    <delete dir="${swtlib.dir}" />
	    <ivy:resolve file="${ivyfile}" conf="test" />
	    <ivy:retrieve conf="swtlibs" pattern="${swtlib.dir}/[module]-[revision](-[classifier]).[ext]" symlink="${ivy.use.symlinks.internal}" />
	  </target>
	
	    <target name="package.lib" depends="resolve">
	      <jar jarfile="dist/${lib.zip.filename}" basedir="lib" />
	    </target>	
	
	 <target name="resolve-launcher" depends="install-ivy">
      <ivy:resolve file="${ivyfile}" conf="launcher" />
      <ivy:retrieve conf="launcher" pattern="${stage.dir}/${package.root.dir}/launcher/[module]-[revision](-[classifier]).[ext]" symlink="${ivy.use.symlinks.internal}" />
    </target>
</project>
