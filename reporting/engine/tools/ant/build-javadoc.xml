<!--===========================================================================
    COMMON_BUILD.XML

    This is the build file that is used across all Pentaho projects that are
    using the "new and improved" ivy builds.

    This file contains the default implementation of the ant tasks to
    perform a build. This file should be included by the build.xml file
    for each project in the Pentaho system. That build file should
    redefine any task that is defined in this file IF AND ONLY IF the
    functioning of that task should be different for that specific
    project.

    NOTE: Any modification to this file should be viewed as a modification
          the EVERY common_build.xml file (and the change should be copied
          to all common_build.xml files that can be found)

    FORMATTING:
    	ALIGNMENT: indent=2 spaces and wrap lines longer than 120 chars
    	NAMING: targets intended for execution by a user are named single-word
    	        or hyphenated.  Internal targets use '.' notation.

    TO GET STARTED with your project, you will need this file in
          your project's root directory along with three additional files:
          1. build.xml
          2. build.properties
          3. ivy_settings.xml
          4. ivy.xml

          Below are some templates:

	    === build.xml
		<project name="MyProject" basedir="." default="jar" xmlns:ivy="antlib:org.apache.ivy.ant" >
			<description>
				This build file is used to create the MyProject project and works with the common_build.xml file.
			</description>

			<import file="common_build.xml"/>
		</project>

		=== build.properties
		project.revision=1.0-SNAPSHOT  #the version of your project.  This will appear in jar META-INF, dist artifact filenames and IVY revision metadata.
		ivy.artifact.id=my-project   #IVY metadata describing the name of the artifact
		impl.title=My Project #English language version of your project name

============================================================================-->
<project basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

  <target name="auto-init-javadoc" if="auto-init.javadoc.enabled">
    <import file="build-init.xml"/>
  </target>

  <!-- Javadoc properties -->
  <property name="javadoc.dir"
            value="${bin.dir}/javadoc"
            description="Directory where generated javadoc will be placed" />
  <property name="javadoc.packagenames"
            value="org.pentaho.*"
            description="This property is passed to the packagenames property of the javadoc ant task.  You should customize this for your project." />


  <!--=======================================================================
	    javadoc

	    Generates javadoc source documentation for this project
	    ====================================================================-->
  <target name="javadoc"
          depends="javadoc.init"
          description="Generates javadoc source documentation for this project">
    <javadoc destdir="${javadoc.dir}/docs/api"
             access="public"
             source="1.5"
             use="true"
             notree="false"
             nonavbar="false"
             noindex="false"
             splitindex="true"
             author="true"
             version="true"
             maxmemory="256M"
             nodeprecatedlist="false"
             nodeprecated="false"
             packagenames="${javadoc.packagenames}"
             sourcepath="${src.dir}"
             doctitle="${impl.title} documentation">
      <link href="http://java.sun.com/j2se/1.5.0/docs/api/" />
      <classpath refid="classpath" />
    </javadoc>
  </target>


  <!--=======================================================================
	    dist-javadoc

	    Generates zip and targz distributions of the javadoc
	    ====================================================================-->
  <target name="dist-javadoc"
          depends="javadoc.zip, javadoc.targz"
          description="Generates zip and targz distributions of the javadoc" />


  <!--=======================================================================
	    clean-javadoc

	    Removes generated javadoc files (note, this does not remove javadoc distributions.
	    Use clean-dist to remove artifacts from the dist.dir.
	    ====================================================================-->
  <target name="clean-javadoc" depends="auto-init-javadoc" description="Removes non-dist generated javadoc files">
    <delete dir="${javadoc.dir}" />
  </target>


  <!--=======================================================================
	    javadoc.init

	    Creates directories for javadoc process
	    ====================================================================-->
  <target name="javadoc.init" depends="clean-javadoc">
    <mkdir dir="${javadoc.dir}" />
  </target>


  <!--=======================================================================
	    javadoc.zip

	    Creates a zip of the javadoc for distribution
	    ====================================================================-->
  <target name="javadoc.zip" depends="javadoc">
    <jar jarfile="${dist.dir}/${ivy.artifact.id}-${project.revision}-javadoc.zip"
         basedir="${javadoc.dir}"
         includes="**/*"
         excludes="**/Thumbs.db" />
  </target>


  <!--=======================================================================
	    javadoc.targz

	    Creates a gzipped tar of the javadoc for distribution
	    ====================================================================-->
  <target name="javadoc.targz" depends="javadoc">
    <tar compression="gzip"
         destfile="${dist.dir}/${ivy.artifact.id}-${project.revision}-javadoc.tar.gz"
         basedir="${javadoc.dir}"
         includes="**/*"
         excludes="**/Thumbs.db" />
  </target>


</project>
