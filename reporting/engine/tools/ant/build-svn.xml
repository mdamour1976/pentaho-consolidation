<project basedir=".." xmlns:ivy="antlib:org.apache.ivy.ant">

  <target name="auto-init-svn" if="auto-init.svn.enabled">
    <import file="build-init.xml"/>
  </target>

  <!-- Build Mode properties -->
  <property name="release" value="false" description="Set this to true if you want to generate a release artifact" />
  
  <!-- =================================================================================
	     Property Defaults
	     Any of these properties can be overridden in either build.properties or override.properties
	     =================================================================================-->

  <!-- SVN Ant Properties -->
  <property name="svnant.url"
            value="http://subclipse.tigris.org/files/documents/906/35081/svnant-1.1.0-RC2.zip"
            description="The URL to the current release of SVN Ant" />
  <property name="svnant.use-javahl"
            value="false"
            description="Prefer JNI JavaHL binding over the command line client for native svn support" />
  <property name="svnant.use-svnkit"
            value="true"
            description="Prefer SVNKit binding over the command line client for native svn support (defaults to true)" />

  <!--=======================================================================
	    svnant.download-check

	    Fetch SVN ANT zip if it is not already present
	    ====================================================================-->
  <target name="svnant.download-check">
    <condition property="svnant.available">
      <and>
        <available file="${svnant.build.cache.dir}" />
        <available classname="org.tigris.subversion.svnant.SvnTask">
          <classpath>
            <fileset dir="${svnant.build.cache.dir}">
              <include name="**/*.jar" />
            </fileset>
          </classpath>
        </available>
      </and>
    </condition>
    <antcall target="svnant.download" />
  </target>


  <!--=======================================================================
      svnant.download

      Downloads the IVY jar file for use by ant.
      ====================================================================-->
  <target name="svnant.download" unless="svnant.available">
    <mkdir dir="${svnant.build.cache.dir}" />
    <get src="${svnant.url}" dest="${svnant.build.cache.dir}/svnant.zip" usetimestamp="true" />
    <unzip src="${svnant.build.cache.dir}/svnant.zip" dest="${svnant.build.cache.dir}">
      <patternset>
        <include name="**/*.jar" />
      </patternset>
    </unzip>
  </target>


  <!--=======================================================================
    install-svnant

    (Fetches and) installs the SVN ANT for use by this ant script
    ====================================================================-->
  <target name="install-svnant"
          depends="auto-init-svn,install-antcontrib, svnant.download-check"
          description="Installs SVN ANT tasks for use by this build process">
    <if>
      <istrue value="${svnant.isinstalled}" />
      <then>
        <echo message="Skipping SVN ANT install.  IVY has already been configured by the build" />
      </then>
      <else>
        <echo message="Installing SVN ANT..." />
        <path id="svnant.lib.path">
          <fileset dir="${svnant.build.cache.dir}" includes="**/*.jar" />
        </path>
        <typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="svnant.lib.path" />
        <property name="svnant.isinstalled" value="true" />
      </else>
    </if>
  </target>


  <!--=======================================================================
        test-svnant

        Tests SVN by printing out the repository
        ====================================================================-->
  <target name="test-svnant" depends="install-svnant">
    <svn javahl="${svnant.use-javahl}" >
      <wcVersion path="." />
    </svn>
    <echo message="Subversion repository url: ${repository.url}" />
  </target>


  <!--=======================================================================
        svn-revision

        Tests SVN by printing out the repository
        ====================================================================-->
  <target name="svn-revision"
          depends="install-svnant"
          description="Prints and sets the SVN revision for the repository at the current dir (if svn.revision is not set)">

    <svn javahl="${svnant.use-javahl}" svnkit="${svnant.use-svnkit}">
      <status path="." revisionProperty="svn.revision" />
    </svn>
    <echo message="Subversion repository revision: ${svn.revision}" />
  </target>


  <!--=======================================================================
        set-build.id

        Sets a property build.id to the either "development" or the svn revision
        if in release mode
        ====================================================================-->
  <target name="set-build.id" unless="build.id" depends="auto-init-svn,install-svnant">
    <if>
      <istrue value="${release}" />
      <then>
        <antcallback target="svn-revision" return="svn.revision" />
        <property name="build.id" value="${svn.revision}" />
      </then>
      <else>
        <property name="build.id" value="development" />
      </else>
    </if>
  </target>

  <macrodef name="svn-update">
    <attribute name="url" description="The URL from where to checkout the sources"/>
    <attribute name="target" description="The target directory (will be created if it does not exist)"/>
    <sequential>
      <if>
        <available file="@{target}"/>
        <then>
          <svn javahl="${svnant.use-javahl}">
            <update dir="@{target}"/>
          </svn>
        </then>
        <else>
          <mkdir dir="@{target}"/>
          <svn javahl="${svnant.use-javahl}">
            <checkout url="@{url}" destPath="@{target}"/>
          </svn>
        </else>
      </if>
    </sequential>
  </macrodef>

</project>
