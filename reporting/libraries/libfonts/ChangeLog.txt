---------------
1.  WHAT's NEW
---------------
A list of changes in recent versions:

1.1.3: (2009-11-16)
        * Change due to LibLoader Fix for PRD-2072.

1.1.1: (2009-08-21)
        * BUG: many static loggers were not declared as final.

1.1.0: (2009-07-29)
        * Performance fixes in AfmFontRegistry, CodePointBuffer and FontKey.

        * Moved all code from package org.jfree.fonts to package
          org.pentaho.reporting.libraries.fonts.

        * Added explict catch for cache failures so that they do no longer show
          up as errors

        * Added explicit "clone()" method to ClassificationProducer interface
          so that implementation errors get caught by the compiler.

        * PRE-471: Allow to define extra font paths to be defined via the
          global configuration.

        * PRE-477: Whitespace-Collapse used ZERO_WIDTH_NON_JOINER (U+200c) as indicator
          of word-breaks but should use ZERO_WIDTH (U+200b) instead.

0.4.0-bugfix:
        * [BUG] PRE-432: Grapheme-cluster detection for CR+LF was wrong and thus
          did not catch Windows-style line-breaks.

0.4.0: (30-May-2008)
        * Switched from JCommon to LibBase. All version information is now contained in
          the manifest. The Project-Info implementation reads the version numbers from
          the Jar's Manifest or the compiler-output-directory.

        * [BUG] AWT-Fontmetrics used a int-method instead of the floating point methods
          provided by the AWT and therefore returned invalid values which lead to layouting
          errors.

        * Font-Registries for TTF and Type1 and Type3 fonts now use a persistent cache.
          This greatly speeds up the font registration process as the syncronization with
          already cached font information is a lot cheaper than re-opening and readong
          all the fonts all the time.

        * Font metrics are now fully cached. The font metrics itself cache the metrics
          and baselines for all characters in the range of 0x0020 to 0x00FF which covers
          most of the Latin charset families. The creation of the font metrics is now
          also covered by a two-level cache. As long as a font storage is active, it
          holds strong references to the fonts being used so that it is guaranteed that
          every font-metrics object is created only once. Additionally, all created
          font metrics are passed down to a global cache so that other reports using the
          same font do not have to recreate the font metrics from scratch. The second
          level cache is a LFU-cache, so only the most recently used fonts are held in
          the cache.

          For most latin texts font metrics computation is now performed in linear time
          and space.

0.3.4: (02-Nov-200)
        * Upgraded to jcommon-1.0.12

0.3.3: (16-Oct-2007)
        * The build is now modular. All code that depends on iText is placed in a
          separate jar-file. iText and the IText-FontRegistry are needed for PDF and
          RTF exports.

0.3.2:  (06-Oct-2007)
        * [BUG] Fixed PRD-294 - AWT font metrics did not always return strict-geometry
        
0.3.1:  (03-Oct-2007)
        * [BUG] Fixed an IndexOutOfBoundsException during the font registration.

0.3.0:  (24-Sep-2007)
        * Changed build to JDK 1.4
        
        * [API] Instead of using floating point mathematics, LibFonts now uses integer
          mathematics based on MicroPoints. The Micropoint is the natural unit for
          Type1 and Type3 fonts. Using integer mathematics frees the engine from the
          uncertainity of the rounding errors and inaccurate floating point maths of
          todays computer systems.

        * [BUG] When registering fonts, not all input streams were closed correctly.
          This can lead to very strange class-loading errors later, when the number
          of open streams exceeds the number of file descriptors available.

0.2.11: (07-Sep-2007)
        * [BUG] The strikethrough and underline positions were invalid.
          Max-Height was invalid, as the iText descent was returned as  negative number.

        * [CLEANUP] Removed the MaxLeading. Leading is always the same for all chars.
          Changed AWT font metrics to be more realistic.       

0.2.10: (15-Aug-2007)
        * [BUG] Fixes for all font-metrics to properly return the strikethrough,
          underline and overline positions. Some implementations return 
          computed defaults, if the font system does not provide the necessary
          metrics.        

0.2.9: (06-Aug-2007)
        * [BUG] Fixed a OutOfMemory-Condition caused by the constant regeneration
          of font-metrics objects. These beasts are not that heavyweight, but
          generateing and holding several millions of them kills the VM

        * [CLEANUP] Removed some old CVS artifacts left over from move to SVN

0.2.8: (01-Aug-2007)
        * [BUG] The iText-FontMetrics raised a NullPointer-Exception if the font
          did not supply valid metrics for the lower-case 'x' character.

0.2.7: (22-Jul-2007)
        * Added support for iText fonts, AFM fonts and PFM fonts. The AFM and PFM
          fonts have no valid font-metrics system yet, use the iText font system
          instead.

0.2.6: (27-May-2007)
        * Implemented the Grapheme-Cluster algorithm as specified by the Unicode
          UAX#29 document.

0.2.5: (21-May-2007)
        * Added explicit monospace-font support. This is faster than rerouting all
          requests to a real monospaced-font.

0.2.4: (27-Apr-2007)
        * Added Font-Metrics caching to the AWT-FontMetrics for ASCII and ISO-8859-1
          characters.

        * Moved the Text-Classifiers implementations from LibLayout into LibFonts.

0.2.3: (01-Mar-2007)
        * LibLoader changed the way resource-keys are managed.

0.2.2: (03-Dec-2006)
        * AWT-FontMetrics caching

        * Encoding API fixes

0.2.1: (26-Sep-2006)
        * Libraries updated to latest releases

0.1.9: (29-Jun-2006)
        * [BUG] Oblique and Italics detection was weird and wrong.

        * [BUG] CodePointBuffer and ByteBuffer classes made a boo on copying the
          internal buffers.

0.1.8: (30-May-2006)
        * Updated the libraries and all code that depends on them.

0.1.7: (30-Apr-2006)
        * [BUG] Missing or invalid encoding implementations interrupted the
          font registration process. Missing encodings are now replaced by
          internal UTF-32-aware encoding implementations.

        * LibFonts is now dependent on LibLoader for loading external encodings.

0.1.6: (17-Apr-2006)
        * BugFixes

0.1.4: (27-Jan-2006)
        * restructuring and more font reading

        * recognizes italic and oblique fonts.

        * Support AWT and TrueType fonts using an common interface.

0.1.1: (21-Nov-2005)
        * [BUG] All names should be used, when looking for font family names.

0.1.0: (09-Nov-2005)
        * Reading the 'name', 'head' and 'OS/2' table for truetype files is
          implemented. This is all that is needed to successfully register
          fonts.

        * A serializable 'FontRegistry' loads all available fonts from the system
          directories. It can be stored and reloaded, as this implementation is no
          singleton anymore.
