<project name="Kettle" default="default" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

	  <description>
	      Kettle build file
	  </description>
	
	  <tstamp prefix="start"/>
	
        <tstamp>
           <format property="compile.timestamp" pattern="yyyy-MM-dd HH.mm.ss" />
        </tstamp>

        <!-- Look for user-override properties file first -->        
		<property file="override.properties"/>
        <!-- set global properties for this build -->
		<property file="build.properties"/>
	
	  <!--Import Open Assembly ant file -->
	  <import file="build-res/subfloor.xml" />
	  <!--
	  
	       ==========================
	            Compile the code
	       ==========================
	  -->
		
	  <!-- target name="generate-parser-for-edi2xml-step" depends="compile-core" description="">
	  	<echo>Generating parser java classes for the  edi2xml step...</echo>
		<java classname="org.antlr.Tool" fork="true" failonerror="true">
			<classpath refid="cp-kettle-core" />
			<arg value="-make"/>
			<arg value="-verbose"/>
			<arg value="-o"/>
			<arg path="${src}/org/pentaho/di/trans/steps/edi2xml/grammar"/>
			<arg path="${src}/org/pentaho/di/trans/steps/edi2xml/grammar/FastSimpleGenericEdifactDirectXML.g"/>
		</java>
	  </target -->
	
		<!--
		       ==========================
		          Compile the test code
		       ==========================
		  -->

		  <target name="compileTests" description="compile the tests" >
		  	<echo>Compiling Kettle tests...</echo>
		    <javac fork="true"
		    	   srcdir="${test}" 
		    	   destdir="${testClasses}"
		    	   target="6"
		    	   source="6"
		           deprecation="true"
		    	   debug="true"
	        	   includeantruntime="false"
		    	>

		    	<classpath id="cp-kettle-test">
		    		<fileset dir="${assembly.dir}/${lib}" 	  		includes="**/*.jar"/>
		    		<fileset dir="${assembly.dir}/${testlibext}" 	includes="*.jar"/>
		    		<fileset dir="${assembly.dir}/${libswt}"                includes="*.jar *.zip"/>
		    		<fileset dir="${assembly.dir}/${libswt}/win32/" includes="*.jar *.zip"/>
		    		<fileset dir="${assembly.dir}/${libswt}" 		includes="common.jar"/>
			</classpath>
		    </javac>
		  </target>
	
	  <!--
	       ==========================
	         javadoc of the source
	       ==========================
	  -->

	  <target name="javadoc" depends="build-all" description="compile the javadoc api" >
	  	<echo>Compiling the Kettle API javadocs...</echo>	
	  </target>

	  <target name="javadoc_zip" depends="javadoc" description="generate a zip file containing the Kettle javadoc">
	  	<echo>Generating the Kettle javadoc zip file ...</echo>
	  	<jar jarfile="${dist.dir}/${product.name}-${product.release.type}-javadoc-${release.version}${release.status.token}.zip" 
	    	 basedir="${docs}" 
	    	 includes="api/**/* api-core/**/*"
	  	     excludes="**/Thumbs.db"
	  		/>
	  </target>
	
	  <target name="kettle-test" depends="compileTests" description="generate the kettle library kettle-test.jar">
        <echo>Generating the Kettle library kettle-test.jar ...</echo>
		<jar jarfile="${lib}/kettle-test.jar" 
		   	 basedir="${testClasses}" 
		   	 includes="**/* ${version.file.path}"
		     excludes="**/Thumbs.db **/*.jar **/*.swp">
	             <manifest>
	             	<attribute name="Implementation-Title" value="${impl.title.ui}" />
	                <attribute name="Implementation-Version" value="${impl.version}" />
	                <attribute name="Specification-Version" value="${revision}" />
	                <attribute name="Implementation-Vendor" value="${impl.vendor}" />
	    			<attribute name="Implementation-ProductID" value="${impl.productID}" />
	                <attribute name="Compile-Timestamp" value="${compile.timestamp}" />
	                <attribute name="Compile-User" value="${user.name}" />
	             </manifest>
        </jar>
	  </target>	

	<target name="distrib-nodeps" description="copy jar files to distribution directory" >
		<ant antfile="build.xml" dir="assembly" target="assemble-full">
			<property name="project.revision" value="TRUNK-SNAPSHOT"/>
			<property name="dist.dir" value="dist"/>
		</ant>
	</target>
		
	  <!--
	       ==========================
	             Source zipfile
	       ==========================
	  -->
		
	  <!-- target name="sourcezip" depends="init" description="generate the Kettle-src-${version}-${release.build.number}-r${revision}.zip file">
	  	<echo>Generating the Kettle source packge zip file (${impl.productID}-src-${version}-r${revision}.zip) ...</echo>
	  	<jar jarfile="${dist.dir}/${impl.productID}-src-${version}-r${revision}.zip" 
	  		 basedir="."
	    	 includes="**/*"
	  	     excludes="*.zip ${classes}/**/* ${distrib}/**/* homepage/**/* Licenses/**/* ${lib}/**/* docs/api/** docs/api-core/**"
	  		/>
	  </target -->

	
	
	<!-- target name="i18n" depends="kettle-ui" description="generate the Kettle-i18n-${version}-r${revision}.zip file">
		  	<echo>Generating the Kettle i18n distribution package Kettle-i18n-${version}-r${revision}.zip ...</echo>
		  	<jar jarfile="${dist.dir}/Kettle-i18n-${version}-r${revision}.zip" 
		    	 basedir="." 
		    	 includes="src/**/*.java src/**/*.properties src-ui/**/*.java src-ui/**/*.properties lib/*.jar libswt/win32/*.jar libswt/linux/x86/*.jar libswt/*.jar libext/log4j-1.2.8.jar libext/spring/spring-core.jar libext/commons/commons-vfs*.jar libext/commons/commons-logging*.jar ui/*.xul Translator.bat translator.sh translator.xml"
		  	     excludes="**/Thumbs.db **/.svn"
		  		/>
	</target -->
		
	<target name="junit-report" depends="tests-all" description="Create an HTML report of ALL unit tests">
		<junitreport todir="${junit}">
		  <fileset dir="${junit}">
			<include name="TEST-*.xml"/>
		  </fileset>
		  <report format="frames" todir="${junit}/html"/>
		</junitreport>
	</target>

	<!--
	       ===========================================
	          tests : junit core tests
	       ============================================
	  -->
	<target name="tests-core" depends="compileTests" description="Execute the core tests">
		
		<junit printsummary="no" fork="yes" forkmode="perTest" jvm="java" maxmemory="512M" showoutput="yes">
	    	<classpath>
				<fileset dir="${lib}" includes="kettle-core.jar"/>
				<fileset dir="${lib}" includes="kettle-db.jar"/>
				<fileset dir="${lib}" includes="kettle-engine.jar"/>
				<fileset dir="test/libext/" includes="kettle.jar"/>
	    		<pathelement path="${testClasses}"/>

				<fileset dir="${libext}" 		includes="*.jar *.zip"/>
				<fileset dir="${libext}/"	    includes="**/*.jar *.zip"/>
				<fileset dir="${libswt}" 		includes="*.jar *.zip"/>
				<fileset dir="${libswt}/win32/" includes="*.jar *.zip"/>
			</classpath>
			
			<formatter type="xml"/>
		  	<test todir="${junit}" name="org.pentaho.di.core.KettleEnvironmentTest" haltonerror="true" />
		  	<test todir="${junit}" name="org.pentaho.di.compatibility.ValueBigNumberTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.compatibility.ValueBooleanTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.compatibility.ValueDateTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.compatibility.ValueIntegerTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.compatibility.ValueNumberTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.compatibility.ValueStringTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.compatibility.ValueTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.core.database.DatabaseTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.core.database.SelectCountTests" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.core.database.SQLStatementParserTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.core.database.ReleaseSavePointTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.core.database.TablespaceDDLFragmentTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.core.database.VerticaDatabaseMetaTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.core.encryption.EncrTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.core.row.RowDataUtilTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.core.row.RowTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.core.row.ValueDataUtilTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.core.row.ValueMetaTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.core.ConstTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.core.CountersTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.core.CounterTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.core.RowSetTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.core.BlockingBatchingRowSetTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.imp.rule.DatabaseConfigurationImportRuleTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.imp.rule.JobHasANoteImportRuleTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.imp.rule.TransformationHasANoteImportRuleTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.imp.rule.JobHasDescriptionImportRuleTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.imp.rule.TransformationHasDescriptionImportRuleTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.imp.rule.JobHasJobLogConfiguredImportRuleTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.imp.rule.TransformationHasTransLogConfiguredImportRuleTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.imp.rule.TransformationHasNoDisabledHopsImportRuleTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.imp.rule.JobHasNoDisabledHopsImportRuleTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.repository.KettleDatabaseRepositoryTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.repository.KettleFileRepositoryTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.repository.RepositoryImportExporterApiTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.repository.RepositoryUnitTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.core.sql.IifFunctionTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.core.sql.SQLConditionTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.core.sql.SQLFieldsTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.core.sql.SQLFieldTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.core.sql.SQLTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.core.sql.SqlTransMetaTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.core.sql.TransDataServletTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.core.logging.MetricsTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.core.parameters.ParameterSimpleTransTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.core.plugins.PluginRegistryTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.core.util.StringEvaluatorTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.core.util.StringUtilTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.core.vfs.VfsCoreTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.resource.NameResourceTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.resource.ResourceDependencyTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.resource.ResourceExportTest" haltonerror="false" />
					  				
		</junit>
	</target>

	<!--
	       ===========================================
	         	tests : junit transformation tests
	       ============================================
	  -->
	<target name="tests-trans" depends="compileTests" description="Execute the transformation tests">
		
		<junit printsummary="no" fork="yes" forkmode="perTest" jvm="java" maxmemory="512M" showoutput="yes">
	    	<classpath>
				<fileset dir="${lib}" includes="kettle-core.jar"/>
				<fileset dir="${lib}" includes="kettle-db.jar"/>
				<fileset dir="${lib}" includes="kettle-engine.jar"/>
				<fileset dir="test/libext/" includes="kettle.jar"/>
	    		<pathelement path="${testClasses}"/>

				<fileset dir="${libext}" 		includes="*.jar *.zip"/>
				<fileset dir="${libext}/"	    includes="**/*.jar *.zip"/>
				<fileset dir="${libswt}" 		includes="*.jar *.zip"/>
				<fileset dir="${libswt}/win32/" includes="*.jar *.zip"/>
			</classpath>
			
			<formatter type="xml"/>
			
		  	<test todir="${junit}" name="org.pentaho.di.trans.HopTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.trans.NormalExecutionTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.trans.RowProducerTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.trans.TransSingleThreadTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.trans.WordCountSingleThreadTest" haltonerror="false" />
									
		  	<test todir="${junit}" name="org.pentaho.di.trans.steps.addsequence.AddSequenceTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.trans.steps.append.AppendTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.trans.steps.blockingstep.BlockingStepTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.trans.steps.checksum.CheckSumTest" haltonerror="false" />
  			<test todir="${junit}" name="org.pentaho.di.trans.steps.combinationlookup.CombinationLookupTest" haltonerror="false" />
  			<test todir="${junit}" name="org.pentaho.di.trans.steps.constant.ConstantTest" haltonerror="false" />
  			<test todir="${junit}" name="org.pentaho.di.trans.steps.csvinput.CsvInput1Test" haltonerror="false" />
  			<test todir="${junit}" name="org.pentaho.di.trans.steps.csvinput.CsvInput2Test" haltonerror="false" />
  			<test todir="${junit}" name="org.pentaho.di.trans.steps.databaselookup.DatabaseLookupTest" haltonerror="false" />
  			<test todir="${junit}" name="org.pentaho.di.trans.steps.detectlastrow.DetectLastRowStepTest" haltonerror="false" />
  			<test todir="${junit}" name="org.pentaho.di.trans.steps.excelinput.JxlWorkBookTest" haltonerror="false" />
  			<test todir="${junit}" name="org.pentaho.di.trans.steps.excelinput.OdsWorkBookTest" haltonerror="false" />
  			<test todir="${junit}" name="org.pentaho.di.trans.steps.excelinput.PoiWorkBookTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.trans.steps.execsqlrow.ExecSQLRowTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.trans.steps.getxmldata.GetXMLDataTest" haltonerror="false" />
  			<test todir="${junit}" name="org.pentaho.di.trans.steps.injector.InjectorTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.trans.steps.insertupdate.InsertUpdateTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.trans.steps.janino.JaninoStepTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.trans.steps.jsonoutput.JsonOutputTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.trans.steps.mailvalidator.MailValidationTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.trans.steps.mapping.RunMapping" haltonerror="false" />
        	<test todir="${junit}" name="org.pentaho.di.trans.steps.mapping.MappingTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.trans.steps.metainject.MetaInjectTest" haltonerror="false" />
  			<test todir="${junit}" name="org.pentaho.di.trans.steps.nullif.NullIfTest" haltonerror="false" />
  			<test todir="${junit}" name="org.pentaho.di.trans.steps.numberrange.NumberRangeRuleTest" haltonerror="false" />
  			<test todir="${junit}" name="org.pentaho.di.trans.steps.numberrange.NumberRangeSetTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.trans.steps.regexeval.RegexEvalTest" haltonerror="false" />
  			<test todir="${junit}" name="org.pentaho.di.trans.steps.rowgenerator.RowGeneratorTest" haltonerror="false" />
  			<test todir="${junit}" name="org.pentaho.di.trans.steps.scriptvalues_mod.JavaScriptSpecialTest" haltonerror="false" />
  			<test todir="${junit}" name="org.pentaho.di.trans.steps.scriptvalues_mod.JavaScriptStringTest" haltonerror="false" />
  			<test todir="${junit}" name="org.pentaho.di.trans.steps.sort.SortRowsTest" haltonerror="false" />
  			<test todir="${junit}" name="org.pentaho.di.trans.steps.tableoutput.TableOutputTest" haltonerror="false" />
  			<test todir="${junit}" name="org.pentaho.di.trans.steps.tableinput.TableInputTest" haltonerror="false" />
        	<test todir="${junit}" name="org.pentaho.di.trans.steps.textfileinput.TextFileInputTests" haltonerror="false" />
        	<test todir="${junit}" name="org.pentaho.di.trans.steps.textfileoutput.TextFileOutputTests" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.trans.steps.unique.UniqueRowsTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.trans.steps.update.UpdateTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.trans.steps.valuemapper.ValueMapperTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.trans.steps.splitfieldtorows.SplitFieldToRowsTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.trans.steps.xslt.XsltTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.core.database.SequenceMetaTests" haltonerror="false" />

		</junit>
	</target>
	
	<!--
	       ===========================================
	          tests : junit black box tests
	       ============================================
	  -->
	
	<target name="tests-all" depends="tests-core, tests-trans, tests-run, tests-blackbox, tests-plugins"/>
	
	<target name="tests-blackbox" depends="compileTests" description="Execute the black box transformation tests">
		
		<junit printsummary="no" fork="yes" forkmode="perTest" jvm="java" maxmemory="512M" showoutput="yes">
	    	<classpath>
				<fileset dir="${lib}" includes="kettle-core.jar"/>
				<fileset dir="${lib}" includes="kettle-db.jar"/>
				<fileset dir="${lib}" includes="kettle-engine.jar"/>
				<!-- fileset dir="test/libext/" includes="junit.jar"/ -->
	    		<pathelement path="${testClasses}"/>

				<fileset dir="${libext}" 		includes="*.jar *.zip"/>
				<fileset dir="${libext}/"	    includes="**/*.jar *.zip"/>
				<fileset dir="${libswt}" 		includes="*.jar *.zip"/>
				<fileset dir="${libswt}/win32/" includes="*.jar *.zip"/>
			</classpath>
			
			<formatter type="xml"/>

		  	<test todir="${junit}" name="org.pentaho.di.blackbox.BlackBoxTests" haltonerror="false" />
		</junit>
	</target>

	<!--
	       ===========================================
	          tests : junit run tests
	       ============================================
	  -->

	<target name="tests-run" depends="compileTests" description="Execute the transformation run tests">
		
		<junit printsummary="no" fork="yes" forkmode="perTest" jvm="java" maxmemory="512M" showoutput="yes">
	    	<classpath>
				<fileset dir="${lib}" includes="kettle-core.jar"/>
				<fileset dir="${lib}" includes="kettle-db.jar"/>
				<fileset dir="${lib}" includes="kettle-engine.jar"/>
	    		<fileset dir="${lib}" includes="kettle-dbdialog.jar"/>
	    		<fileset dir="${lib}" includes="kettle-ui-swt.jar"/>
				<fileset dir="test/libext/" includes="jetty-servlet-tester-*.jar"/>
	    		<pathelement path="${testClasses}"/>

				<fileset dir="${libext}" 		includes="*.jar *.zip"/>
				<fileset dir="${libext}/"	    includes="**/*.jar *.zip"/>
				<fileset dir="${libswt}" 		includes="*.jar *.zip"/>
				<fileset dir="${libswt}/win32/" includes="*.jar *.zip"/>
			</classpath>
			
			<formatter type="xml"/>

		  	<test todir="${junit}" name="org.pentaho.di.cluster.CarteLauncherTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.cluster.MasterSlaveTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.cluster.PartitioningTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.cluster.SlaveSequenceTest" haltonerror="false" />
		  	<test todir="${junit}" name="org.pentaho.di.www.CarteTest" haltonerror="false" />
			
			<!-- Some extra things to run -->
			<test todir="${junit}" name="org.pentaho.di.job.entries.copyfiles.CopyFilesTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.kitchen.KitchenTest" haltonerror="false" />
			<test todir="${junit}" name="org.pentaho.di.www.TransformationMapTest" haltonerror="false" />
		</junit>
	</target>
	
	<!--
	       ==========================
	          Default target: all
	       ==========================
	  -->

	<target name="default" depends="build-all" description="default = build distribution package"/>


	
	 <target name="coverage" depends="clean, compileTests" > <!-- , tests-core, tests-resource, tests-trans, tests-run -->
	 	<ant antfile="build_coverage.xml" dir="." target="coverage" />
	 </target>
	
	 <target name="nightly" depends="clean, build-all" > <!-- , tests-core, tests-resource, tests-trans, tests-run -->
	 	<ant antfile="build_coverage.xml" dir="." target="zip-reports" />
	 </target>
	
	<!--
		BEFORE USING : Please download JarBundler version 1.9 and unzip it in tools/libant/
		http://informagen.com/JarBundler/	
	-->
	
	<target name="macapplication" depends="build-all" description="Build OS X executable">
		
	  	        <delete dir="${macdistrib}/${ant.project.name}.app"/>
			  	<delete>
			        <fileset dir="${macdistrib}">
					  <include name="*.dmg"/>
			    	</fileset>
			  	</delete>

	  	        <taskdef name="jarbundler"
	  	                 classpath="${jarbundler.jar}"
	  	                 classname="net.sourceforge.jarbundler.JarBundler"/>
	  	        <jarbundler dir="${macdistrib}"
	  	                    name="${ant.project.name}"
	  	                    mainclass="org.pentaho.di.ui.spoon.Spoon"
	  	                    icon="${ui}/images/spoon32.icns"
	  	                    version="${version}"
	  	        			verbose="true"
	  	        	VMOptions="${macappmaxmem} ${macappextravmoptions}"
				    shortname="Spoon"
	  	        	arguments=""
                    workingdirectory="$APP_PACKAGE/Contents/Resources/Java"
	  	            jvmversion="1.5+">
                    <javaproperty name="java.library.path" value="$APP_PACKAGE/Contents/Resources/Java"/>
	  	        	<jarfileset dir="${distrib}">
	  	        		<include name="${lib}/*.jar"/>
	  	        		<include name="${libext}/*.jar"/>
	  	        		<include name="${libext}/**/*.jar"/>
	  	        		<include name="${libswt}/*.jar"/>
	  	        		<include name="${libswt}/osx/*.jar"/>
	  	        		<include name="${libswt}/osx/java_swt"/>
	  	        		<include name="${samples}/**/*"/>
	  	        		<include name="${docs}/**/*"/>
	  	        		<include name="README_OSX.txt"/>
	  	        		<include name="*.sh"/>
	  	        		<include name="simple-jndi/**/*"/>
	  	        		<include name="pwd/**/*"/>
	  	        		<include name="plugins/**/*"/>
	  	        		<include name="ui/*"/>
	  	        		<include name="ui/**/*"/>
	  	        	</jarfileset>
	  	        </jarbundler>
	  			<!-- patch Info.plist with StartOnMainThread property need to make sure that the token is in the right place-->
	  			<replace file="${macdistrib}/${ant.project.name}.app/Contents/Info.plist" token="&lt;key&gt;ClassPath" value="&lt;key&gt;StartOnMainThread&lt;/key&gt;&lt;true/&gt; &lt;key&gt;ClassPath" />
	  			<!-- Create a .dmg file containing the app and docs -->
                            <echo>Creating .dmg package...</echo>
	  		    <exec executable="/usr/bin/hdiutil" os="Mac OS X">
	  		      <arg value="create"/>
	  		      <arg value="-srcfolder"/>
	  		      <arg value="${macdistrib}"/>
	  		      <arg value="-volname"/>
	  		      <arg value="${ant.project.name} ${version}"/>
	  		      <arg value="-ov"/>
	  		      <arg value="${macdistrib}/${impl.productID}-${version}.dmg"/>
	  		    </exec>
	  	    </target>
	


	  <!--=======================================================================
	      install-antcontrib (borrowed from subfloor.xml)
	      
	      (Fetches and) installs ant-contrib tasks.
	      ====================================================================-->
	  <target name="install-antcontrib" depends="antcontrib.download-check">
	    <taskdef resource="net/sf/antcontrib/antlib.xml">
	      <classpath>
	        <fileset dir="${user.home}/.subfloor/ant-contrib">
	          <include name="*.jar" />
	        </fileset>
	      </classpath>
	    </taskdef>
	  </target>
	
	  <!--=======================================================================
	      antcontrib.download-check (borrowed from subfloor.xml)
	      
	      Fetches ant-contrib from sourceforge if it is not already present
	      ====================================================================-->
	  <target name="antcontrib.download-check">
	    <condition property="antcontrib.available">
	      <and>
	        <available file="${user.home}/.subfloor/ant-contrib" />
	        <available classname="net.sf.antcontrib.logic.IfTask">
	          <classpath>
	            <fileset dir="${user.home}/.subfloor/ant-contrib">
	              <include name="*.jar" />
	            </fileset>
	          </classpath>
	        </available>
	      </and>
	    </condition>
	    <antcall target="antcontrib.download" />
	  </target>
	
	
	  <!--=======================================================================
	      antcontrib.download (borrowed from subfloor.xml)
	      
	      Fetches ant-contrib from sourceforge
	      ====================================================================-->
	  <target name="antcontrib.download" unless="antcontrib.available">
	    <mkdir dir="${user.home}/.subfloor/tmp" />
	    <get src="http://downloads.sourceforge.net/ant-contrib/ant-contrib-1.0b3-bin.zip"
	         dest="${user.home}/.subfloor/tmp/antcontrib.zip"
	         usetimestamp="true" />
	    <unzip src="${user.home}/.subfloor/tmp/antcontrib.zip" dest="${user.home}/.subfloor/tmp">
	      <patternset>
	        <include name="**/*.jar" />
	      </patternset>
	    </unzip>
	    <copy todir="${user.home}/.subfloor/ant-contrib">
	      <fileset dir="${user.home}/.subfloor/tmp/ant-contrib">
	        <include name="**/*.jar" />
	      </fileset>
	    </copy>
	  </target>

	<!-- 
	     the following set of ant tasks allow for the building of core kettle plugins

		 all core plugins get built as part of the core dist, also you can build the plugins standalone by using 
	     the "-standalone" ant targets related to the plugins.  If you'd like to just build a single plugin, 
	     you can do that by overriding the plugins property to just reference your plugin.
	     
	     Please see plugins/readme.txt for more details.
	-->

	<target name="clean-plugins" depends="install-antcontrib">
	    <for list="${plugin-ids}" param="plugin" trim="true">
	      <sequential>
	      	<delete dir="plugins/@{plugin}/bin"/>
	      	<delete dir="plugins/@{plugin}/dist"/>
		  </sequential>
		</for>
	</target>
	
	<target name="compile-plugins-standalone" depends="install-antcontrib">
	    <for list="${plugin-ids}" param="plugin" trim="true">
	      <sequential>		
	  			<echo>Compiling Kettle Plugin @{plugin}...</echo>
	      		<mkdir dir="plugins/@{plugin}/bin/classes"/>
			    <javac 
			    	   destdir="plugins/@{plugin}/bin/classes"
			    	   target="6"
			    	   source="6"
			           deprecation="true"
			    	   debug="${debug}"
			    	   memorymaximumsize="256M"
			    	   fork="true"
		        	   includeantruntime="false"
			    	>
			    	<src path="plugins/@{plugin}/src"/>
			    	
			    	<classpath>
						<fileset dir="${lib}" 			includes="**/*.jar"/>
						<fileset dir="${libext}"	    includes="**/*.jar **/*.zip"/>
						<fileset dir="${libswt}" 		includes="*.jar *.zip"/>
						<fileset dir="${libswt}/win32/" includes="*.jar *.zip"/>
			    		<fileset dir="plugins/@{plugin}/lib" includes="*.jar *.zip"/>
			  		</classpath>
			    </javac>
			    <copy todir="plugins/@{plugin}/bin/classes">
			    	<fileset dir="plugins/@{plugin}/src" includes="**/*.png **/*.xml **/*.xul **/*txt **/*properties"/>
		  	    </copy>
	      	</sequential>
      	</for>
	</target>
	
	<target name="compile-plugins" description="compile the core plugins"/>
	
	<target name="kettle-plugins-jar-standalone" depends="compile-plugins-standalone" description="generate all the kettle plugin jars">
	  	<for list="${plugin-ids}" param="plugin" trim="true">
	  		<sequential>	
			  	<echo>Generating the Kettle Plugin Jar ${plugin} ...</echo>
	  			<mkdir dir="plugins/@{plugin}/dist"/>
			  	<jar jarfile="plugins/@{plugin}/dist/@{plugin}.jar" 
			    	 basedir="plugins/@{plugin}/bin/classes" 
			    	 includes="**/*" 
			  	     excludes="**/Thumbs.db">
		              <manifest>
		                  <attribute name="Implementation-Title" value="@{plugin}" />
		                  <attribute name="Implementation-Version" value="${impl.version}" />
		                  <attribute name="Specification-Version" value="${revision}" />
		                  <attribute name="Implementation-Vendor" value="${impl.vendor}" />
		  				  <attribute name="Implementation-ProductID" value="${impl.productID}" />
		                  <attribute name="Compile-Timestamp" value="${compile.timestamp}" />
		                  <attribute name="Compile-User" value="${user.name}" />
		              </manifest>
			  	</jar>
			</sequential>
	  	</for>
	</target>
	  	
	<target name="kettle-plugins-jar" depends="compile-plugins, kettle-plugins-jar-standalone" description="generate all the kettle plugin jars"/>
	
	<target name="kettle-plugins-standalone" depends="kettle-plugins-jar-standalone" description="generate all the kettle plugin jars">
	  	<for list="${plugin-ids}" param="plugin" trim="true">
	  		<sequential>	
			  	<echo>Staging the Kettle plugin @{plugin} ...</echo>
	  			<!-- copy plugin jar -->
	  			<mkdir dir="plugins/@{plugin}/bin/stage/@{plugin}"/>
		  		<copy todir="plugins/@{plugin}/bin/stage/@{plugin}"  file="plugins/@{plugin}/dist/@{plugin}.jar"/>

	  	        <!-- external libs (jdbc etc) -->
		  		<mkdir dir="plugins/@{plugin}/bin/stage/@{plugin}/lib"/>
		  		<copy todir="plugins/@{plugin}/bin/stage/@{plugin}/lib">
		  			<fileset dir="plugins/@{plugin}/lib" includes="**/*.jar **/*.zip" excludes="**/.vpn"/>
	  			</copy>

	  			<!-- any other res files -->
		  		<copy todir="plugins/@{plugin}/bin/stage/@{plugin}">
		  			<fileset dir="plugins/@{plugin}/res" includes="**/*" excludes="**/.vpn"/>
	  			</copy>
	  			
	  		    <!-- Update the version.xml with the current version of this plugin -->
	  		    <if>
	  		      <available file="$plugins/@{plugin}/bin/stage/@{plugin}/version.xml" />
	  		      <then>
		  		    <replace file="plugins/@{plugin}/bin/stage/@{plugin}/version.xml" token="@TRUNK@" value="${project.revision}"/>
	  		      </then>
	  		    </if>
			</sequential>
	  	</for>
	</target>

	<target name="kettle-plugins" depends="kettle-plugins-jar, kettle-plugins-standalone" description="generate all the kettle plugin jars"/>
		
  	<target name="kettle-plugins-dist-standalone" depends="kettle-plugins-standalone" description="generate all the kettle plugin jars">
	  	<for list="${plugin-ids}" param="plugin" trim="true">
	  		<sequential>
			  	<echo>Creating the Kettle plugin zip for @{plugin} ...</echo>
	  		  	<zip destfile="plugins/@{plugin}/dist/@{plugin}.zip" 
	  		  		 basedir="plugins/@{plugin}/bin/stage"
	  		    	 includes="**/*"/>
			</sequential>
	  	</for>
	</target>

	<!-- builds distributions of the core kettle plugins, after building the core of kettle --> 
	<target name="kettle-plugins-dist" depends="kettle-plugins, kettle-plugins-dist-standalone" description="generate all the kettle plugin jars"/>

	<target name="compile-plugins-test" depends="compile-plugins">
	    <for list="${plugin-ids}" param="plugin" trim="true">
	      <sequential>		
	  			<echo>Compiling Kettle Plugin @{plugin}...</echo>
	      		<mkdir dir="plugins/@{plugin}/bin/test-classes"/>
			    <javac 
			    	   destdir="plugins/@{plugin}/bin/test-classes"
			    	   target="6"
			    	   source="6"
			           deprecation="true"
			    	   debug="${debug}"
			    	   memorymaximumsize="256M"
			    	   fork="true"
		        	   includeantruntime="false"
			    	>
			    	<src path="plugins/@{plugin}/test"/>
			    	
			    	<classpath>
						<fileset dir="${lib}" 			includes="**/*.jar"/>
						<fileset dir="${libext}"	    includes="**/*.jar **/*.zip"/>
						<fileset dir="${libswt}" 		includes="*.jar *.zip"/>
						<fileset dir="${libswt}/win32/" includes="*.jar *.zip"/>
			    		<fileset dir="plugins/@{plugin}/lib" includes="*.jar *.zip"/>
			    		<pathelement path="plugins/@{plugin}/bin/classes"/>
			  		</classpath>
			    </javac>
			    <copy todir="plugins/@{plugin}/bin/testclasses">
			    	<fileset dir="plugins/@{plugin}/test" includes="**/*.png **/*.xml **/*.xul **/*txt **/*properties"/>
		  	    </copy>
	      	</sequential>
      	</for>
	</target>
	
	<target name="tests-plugins" depends="compile-plugins-test">
	  	<for list="${plugin-ids}" param="plugin" trim="true">
	  		<sequential>
				<junit printsummary="no" fork="yes" forkmode="perTest" jvm="java" maxmemory="512M" showoutput="yes">
			    	<classpath>
						<fileset dir="${lib}" includes="**/*.jar"/>
						<fileset dir="test/libext/" includes="jetty-servlet-tester-*.jar"/>
			    		<pathelement path="plugins/@{plugin}/bin/test-classes"/>
			    		<pathelement path="plugins/@{plugin}/bin/classes"/>
			    		<fileset dir="plugins/@{plugin}/lib" includes="*.jar *.zip"/>
						<fileset dir="${libext}" 		includes="**/*.jar **/*.zip"/>
						<fileset dir="${libswt}" 		includes="*.jar *.zip"/>
						<fileset dir="${libswt}/win32/" includes="*.jar *.zip"/>
					</classpath>
					
					<formatter type="xml"/>
		
				  	<batchtest todir="${junit}" haltonerror="false">
				  		<fileset dir="plugins/@{plugin}/test">
				  		      <include name="**/*Test*.java"/>
			  		    </fileset>
			  		</batchtest>
				</junit>
			</sequential>
		</for>
	</target>
	
	<target name="build-all"
	          description="Build all projects."
	          depends="install-antcontrib">
	    <for list="${dev-project.list}" param="module" trim="true">
	      <sequential>
	        <ant antfile="build.xml" dir="@{module}" inheritall="false" >
	          <target name="clean" />
              <target name="init" />
	          <target name="resolve" />
	          <target name="publish-local" />
	        </ant>
	      </sequential>
	    </for>
	    <ant antfile="build.xml" dir="${assembly.dir}" inheritall="false">
	      <target name="clean-all" />
	      <target name="resolve" />
	      <target name="assemble-full" />
	    </ant>
	  </target>
</project>
