<!--===========================================================================
    COMMON_BUILD.XML

    This is the build file that is used across all Pentaho projects that are
    using the "new and improved" ivy builds.

    This file contains the default implementation of the ant tasks to
    perform a build. This file should be included by the build.xml file
    for each project in the Pentaho system. That build file should
    redefine any task that is defined in this file IF AND ONLY IF the
    functioning of that task should be different for that specific
    project.

    NOTE: Any modification to this file should be viewed as a modification
          the EVERY common_build.xml file (and the change should be copied
          to all common_build.xml files that can be found)

    FORMATTING:
    	ALIGNMENT: indent=2 spaces and wrap lines longer than 120 chars
    	NAMING: targets intended for execution by a user are named single-word
    	        or hyphenated.  Internal targets use '.' notation.

    TO GET STARTED with your project, you will need this file in
          your project's root directory along with three additional files:
          1. build.xml
          2. build.properties
          3. ivy_settings.xml
          4. ivy.xml

          Below are some templates:

	    === build.xml
		<project name="MyProject" basedir="." default="jar" xmlns:ivy="antlib:org.apache.ivy.ant" >
			<description>
				This build file is used to create the MyProject project and works with the common_build.xml file.
			</description>

			<import file="common_build.xml"/>
		</project>

		=== build.properties
		project.revision=1.0-SNAPSHOT  #the version of your project.  This will appear in jar META-INF, dist artifact filenames and IVY revision metadata.
		ivy.artifact.id=my-project   #IVY metadata describing the name of the artifact
		impl.title=My Project #English language version of your project name

============================================================================-->
<project basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

  <target name="auto-init-tests" if="auto-init.tests.enabled">
    <import file="build-compile.xml"/>
  </target>


  <!-- Test properties -->
  <property name="testsrc.dir" value="${basedir}/test-src" description="Directory that hosts the test source files" />
  <property name="testlib.dir"
            value="${basedir}/test-lib"
            description="Directory for jar files needed during unit testing" />
  <property name="testbin.dir" value="${bin.dir}/test" description="Base directory for all test output" />
  <property name="testclasses.dir"
            value="${testbin.dir}/classes"
            description="Classes compiled from project test code are placed here" />
  <property name="testreports.dir"
            value="${bin.dir}/reports/test"
            description="Base directory that holds all unit test report files" />
  <property name="testreports.xml.dir"
            value="${testreports.dir}/xml"
            description="Unit test xml reports are placed here" />
  <property name="testreports.html.dir"
            value="${testreports.dir}/html"
            description="Unit test html reports are placed here" />
  <property name="junit.haltonfailure" value="no" description="Fail the build if a test fails" />


  <!-- Code Coverage properties -->
  <property name="instrumented.classes.dir"
            value="${testbin.dir}/instrumented-classes"
            description="Directory where instrumented project classes are placed for use by code coverage utility" />
  <property name="cobertura.data.dir"
            value="${testbin.dir}/cobertura-bin"
            description="Temporary data directory used by Cobertura" />
  <property name="coberturareports.dir"
            value="${bin.dir}/reports/cobertura"
            description="Base directory for all generated Cobertura code coverage reports" />
  <property name="coberturareports.xml.dir"
            value="${coberturareports.dir}/xml"
            description="Cobertura xml reports are placed here" />
  <property name="coberturareports.html.dir"
            value="${coberturareports.dir}/html"
            description="Cobertura html reports are placed here" />
  <property name="cobertura.build.cache.dir"
            value="${build.cache.dir}/cobertura"
            description="Directory where the Cobertura jar (and dependencies) is placed after it is auto-downloaded by the build" />

  <!-- Setup the classpath used for testing -->
  <path id="test.classpath">
    <fileset dir="${lib.dir}">
      <include name="*.jar" />
    </fileset>
    <fileset dir="${testlib.dir}">
      <include name="*.jar" />
    </fileset>
    <dirset dir="${classes.dir}" />
    <dirset dir="${testclasses.dir}" />
  </path>

  
  <!--=======================================================================
	    clean-tests

	    Removes all files related to tests
	    ====================================================================-->
  <target name="clean-tests" depends="auto-init-tests">
    <delete dir="${testbin.dir}" />
  </target>


  <!--=======================================================================
	    init-tests

	    Compiles project test source
	    ====================================================================-->
  <target name="init-tests" depends="clean-tests">
    <mkdir dir="${testclasses.dir}" />
    <mkdir dir="${testsrc.dir}" />
  </target>


  <!--=======================================================================
	    compile-tests

	    Compiles project test source
	    ====================================================================-->
  <target name="compile-tests" depends="init-tests" description="Compiles project test source">
    <javac destdir="${testclasses.dir}"
           debug="true"
           optimize="false"
           source="${javac.source}"
           target="${javac.target}"
           fork="true">
      <src path="${testsrc.dir}" />
      <classpath refid="test.classpath" />
    </javac>

    <!-- Copy the non-java files from the source directory to the test classes directory -->
    <copy todir="${testclasses.dir}">
      <fileset dir="${testsrc.dir}">
        <exclude name="**/*.java" />
      </fileset>
    </copy>
  </target>


  <!--=======================================================================
	    test

	    Compiles and runs all the tests for the project
	    ====================================================================-->
  <target name="test" depends="auto-init-tests,compile,compile-tests" description="Compiles and runs unit tests">
    <junit printsummary="yes" haltonfailure="${junit.haltonfailure}">
      <classpath refid="test.classpath" />
      <formatter type="plain" />
      <batchtest fork="yes" todir="${testbin.dir}">
        <fileset dir="${testsrc.dir}" casesensitive="yes">
          <include name="**/Test*.java" />
          <include name="**/*Test.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>


  <!--=======================================================================
		clean-test-reports

		Remove all xml and html JUnit test reports
		====================================================================-->
  <target name="clean-test-reports" depends="auto-init-tests">
    <delete dir="${testreports.xml.dir}" />
    <delete dir="${testreports.html.dir}" />
  </target>


  <!--=======================================================================
		init-test-reports

		Prepare directories for JUnit test reports
		====================================================================-->
  <target name="init-test-reports" depends="clean-test-reports">
    <mkdir dir="${testreports.xml.dir}" />
    <mkdir dir="${testreports.html.dir}" />
  </target>

  <!--=======================================================================
	    cobertura

	    Runs tests in an instrumented environment and produces Cobertura test coverage reports
	    ====================================================================-->
  <target name="cobertura"
          depends="auto-init-tests,clean-cobertura,cobertura.install,compile,compile-tests,cobertura.instrument-classes,cobertura.test-instrumented,cobertura.xml-report,cobertura.html-report"
          description="Compile, instrument classes, run the tests and generate Cobertura coverage reports." />


  <!--=======================================================================
	    cobertura.instrument-classes

	    Instruments the application classes used by Cobertura during cobertura.test-instrumented
	    ====================================================================-->
  <target name="cobertura.instrument-classes" depends="cobertura.clean-instrumented-classes,cobertura.install,compile">
    <cobertura-instrument todir="${instrumented.classes.dir}" datafile="${cobertura.data.dir}/cobertura.ser">
      <ignore regex="org.apache.log4j.*" />
      <fileset dir="${classes.dir}">
        <!--
					Instrument all the application classes, but
					don't instrument the test classes.
				-->
        <include name="**/*.class" />
        <exclude name="**/*Test.class" />
      </fileset>

    </cobertura-instrument>
  </target>


  <!--=======================================================================
	    cobertura.install

	    Downloads and installs Cobertura ant tasks
	    ====================================================================-->
  <target name="cobertura.install" depends="cobertura.download">
    <path id="cobertura.classpath">
      <fileset dir="${cobertura.build.cache.dir}">
        <include name="*.jar" />
      </fileset>
    </path>
    <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
  </target>


  <!--=======================================================================
	    cobertura.download-check

	    Fetches Cobertura from sourceforge if it is not already present
	    ====================================================================-->
  <target name="cobertura.download-check">
    <condition property="cobertura.available">
      <and>
        <available file="${cobertura.build.cache.dir}" />
        <available classname="net.sourceforge.cobertura.ant.InstrumentTask">
          <classpath>
            <fileset dir="${cobertura.build.cache.dir}">
              <include name="*.jar" />
            </fileset>
          </classpath>
        </available>
      </and>
    </condition>
    <antcall target="cobertura.download" />
  </target>

  <!--=======================================================================
	    cobertura.download

	    Retrieves Cobertura jar via IVY
	    ====================================================================-->
  <target name="cobertura.download" depends="install-ivy" unless="cobertura.available">
    <ivy:retrieve inline="true"
                  organisation="net.sourceforge.cobertura"
                  module="cobertura"
                  revision="1.9"
                  pattern="${cobertura.build.cache.dir}/[module].[ext]" />
  </target>


  <!--=======================================================================
	    clean-cobertura

	    Removes all files created by Cobertura code coverage utility
	    ====================================================================-->
  <target name="clean-cobertura"
          depends="auto-init-tests,cobertura.clean-instrumented-classes,cobertura.clean-coverage-reports"
          description="Removes all files created by Cobertura code coverage utility.">
    <delete dir="${cobertura.data.dir}" />
  </target>


  <!--=======================================================================
		cobertura.clean-instrumented-classes

		Remove the instrumented classes used by Cobertura
		====================================================================-->
  <target name="cobertura.clean-instrumented-classes">
    <delete dir="${instrumented.classes.dir}" />
  </target>


  <!--=======================================================================
		cobertura.clean-coverage-reports

		Remove all xml and html Cobertura coverage reports
		====================================================================-->
  <target name="cobertura.clean-coverage-reports">
    <delete dir="${coberturareports.xml.dir}" />
    <delete dir="${coberturareports.html.dir}" />
    <delete dir="${coberturareports.dir}" />
  </target>


  <!--=======================================================================
	    cobertura.test-instrumented

	    Runs tests against instrumented classes and generates xml and html JUnit test reports
	    ====================================================================-->
  <target name="cobertura.test-instrumented"
          depends="init-test-reports,cobertura.install,compile,compile-tests,cobertura.instrument-classes">
    <mkdir dir="${instrumented.classes.dir}" />
    <junit fork="yes" failureProperty="test.failed" haltonfailure="${junit.haltonfailure}">

      <!--
				Specify the name of the coverage data file to use.
			-->
      <sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.data.dir}/cobertura.ser" />

      <!--
				Note the classpath order: instrumented classes are before the
				original (uninstrumented) classes.  This is important.
			-->
      <classpath location="${instrumented.classes.dir}" />
      <classpath location="${classes.dir}" />
      <classpath location="${testclasses.dir}" />
      <classpath refid="test.classpath" />
      <classpath refid="cobertura.classpath" />

      <formatter type="xml" />
      <test name="${testcase}" todir="${testreports.xml.dir}" if="testcase" />
      <batchtest todir="${testreports.xml.dir}" unless="testcase">
        <fileset dir="${testsrc.dir}" casesensitive="yes">
          <include name="**/*Test.java" />
          <include name="**/*Test.java" />
        </fileset>
      </batchtest>
    </junit>

    <junitreport todir="${testreports.html.dir}">
      <fileset dir="${testreports.xml.dir}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="frames" todir="${testreports.html.dir}" />
    </junitreport>
  </target>


  <!--=======================================================================
	    cobertura.xml-report

	    Produces machine-readable xml Cobertura coverage report from results of instrumented tests
	    ====================================================================-->
  <target name="cobertura.xml-report" depends="cobertura.test-instrumented">
    <cobertura-report destdir="${coberturareports.xml.dir}" datafile="${cobertura.data.dir}/cobertura.ser" format="xml">
      <fileset dir="${src.dir}">
        <include name="**/*.java" />
      </fileset>
    </cobertura-report>
  </target>


  <!--=======================================================================
	    cobertura.html-report

	    Produces human-readable html Cobertura coverage report from results of instrumented tests
	    ====================================================================-->
  <target name="cobertura.html-report" depends="cobertura.test-instrumented">
    <cobertura-report destdir="${coberturareports.html.dir}"
                      datafile="${cobertura.data.dir}/cobertura.ser"
                      format="html">
      <fileset dir="${src.dir}">
        <include name="**/*.java" />
      </fileset>
    </cobertura-report>
  </target>

</project>
