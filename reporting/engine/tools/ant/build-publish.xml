<!--===========================================================================
    COMMON_BUILD.XML

    This is the build file that is used across all Pentaho projects that are
    using the "new and improved" ivy builds.

    This file contains the default implementation of the ant tasks to
    perform a build. This file should be included by the build.xml file
    for each project in the Pentaho system. That build file should
    redefine any task that is defined in this file IF AND ONLY IF the
    functioning of that task should be different for that specific
    project.

    NOTE: Any modification to this file should be viewed as a modification
          the EVERY common_build.xml file (and the change should be copied
          to all common_build.xml files that can be found)

    FORMATTING:
    	ALIGNMENT: indent=2 spaces and wrap lines longer than 120 chars
    	NAMING: targets intended for execution by a user are named single-word
    	        or hyphenated.  Internal targets use '.' notation.

    TO GET STARTED with your project, you will need this file in
          your project's root directory along with three additional files:
          1. build.xml
          2. build.properties
          3. ivy_settings.xml
          4. ivy.xml

          Below are some templates:

	    === build.xml
		<project name="MyProject" basedir="." default="jar" xmlns:ivy="antlib:org.apache.ivy.ant" >
			<description>
				This build file is used to create the MyProject project and works with the common_build.xml file.
			</description>

			<import file="common_build.xml"/>
		</project>

		=== build.properties
		project.revision=1.0-SNAPSHOT  #the version of your project.  This will appear in jar META-INF, dist artifact filenames and IVY revision metadata.
		ivy.artifact.id=my-project   #IVY metadata describing the name of the artifact
		impl.title=My Project #English language version of your project name

============================================================================-->
<project basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

  <target name="auto-init-publish" if="auto-init.publish.enabled">
    <import file="build-compile.xml"/>
  </target>

  <!--=======================================================================
	    publish-local-nojar

	    Publishes the jar file for this project to the user's local repository
	    for download by other projects currently being executed on the user's
	    system.
	    ====================================================================-->
  <target name="publish-local-nojar" depends="auto-init-publish,install-ivy" description="Publishes the jar file to the local repository">
    <ivy:resolve file="${ivy.artifact.ivyfilename}" />
    <ivy:publish resolver="local" pubrevision="${project.revision}" overwrite="true" forcedeliver="true">
      <artifacts pattern="${dist.dir}/[artifact]-[revision].[ext]" />
    </ivy:publish>
  </target>


  <!--=======================================================================
	    publish-local

	    Builds and publishes the jar file for this project to the user's
	    local repository for download by other projects currently being
	    executed on the user's system.
	    ====================================================================-->
  <target name="publish-local"
          depends="auto-init-publish,dist-jar, dist-source, publish-local-nojar"
          description="Builds and publishes the jar file to the local repository" />


  <!--=======================================================================
        publish-pentaho

        Creates and publishes the jar file for this project to a Maven2
        repository.
        ====================================================================-->
  <target name="publish-pentaho"
          depends="auto-init-publish,dist-jar, publish-pentaho-nojar"
          description="Builds and publishes the jar file to a Maven2 repository">
  </target>


  <!--=======================================================================
	    publish-pentaho-nojar

	    Publishes the jar file for this project to a Maven2 repository.

	    Also requires that the source and the artifact have been built. 
	    ====================================================================-->
  <target name="publish-pentaho-nojar"
          depends="auto-init-publish,install-antcontrib,create-pom,ivy.deliver"
          description="Publishes the jar file to a Maven2 repository">

    <maven-publish-dependencies file="${ivy.artifact.ivypathname}"/>
    <maven-publish-sources file="${dist.dir}/${ivy.artifact.id}-${project.revision}-sources.jar" />
    <maven-publish-artifact file="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar"
                            pom-file="${ivy.artifact.pomfile}" />
  </target>


  <!--=======================================================================
        ivy.deliver

        Creates a publishable version of the ivy dependencies file, ivy.xml
        ====================================================================-->
  <target name="ivy.deliver" />

  <!--=======================================================================
	    maven-publish-dependencies

	    A function that deploys an ivy.xml file to a maven repository
	    ====================================================================-->
  <macrodef name="maven-publish-dependencies">
    <attribute name="file" description="The file that should be published"/>
    <attribute name="group-id" default="${ivy.artifact.group}" description="The maven group-id"/>
    <attribute name="artifact-id" default="${ivy.artifact.id}" description="The maven artifact-id"/>
    <attribute name="version" default="${project.revision}" description="The maven version id"/>
    <sequential>
      <fail message="No file found at: @{file}">
        <condition>
          <not>
            <available file="@{file}" />
          </not>
        </condition>
      </fail>
      <echo message="Publishing @{file} to ${ivy.repository.publish}..." />
      <if>
        <isset property="isWindows" />
        <then>
          <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="deploy:deploy-file" />
            <arg value="-DrepositoryId=${ivy.repository.id}" />
            <arg value="-Durl=${ivy.repository.publish}" />
            <arg value="-DgroupId=@{group-id}" />
            <arg value="-DartifactId=@{artifact-id}" />
            <arg value="-Dversion=@{version}" />
            <arg value="-Dpackaging=ivy.xml" />
            <arg value="-Dfile=@{file}" />
          </exec>
        </then>
        <else>
          <exec executable="mvn" failonerror="true">
            <arg value="deploy:deploy-file" />
            <arg value="-DrepositoryId=${ivy.repository.id}" />
            <arg value="-Durl=${ivy.repository.publish}" />
            <arg value="-DgroupId=@{group-id}" />
            <arg value="-DartifactId=@{artifact-id}" />
            <arg value="-Dversion=@{version}" />
            <arg value="-Dpackaging=ivy.xml" />
            <arg value="-Dfile=@{file}" />
          </exec>
        </else>
      </if>
    </sequential>
  </macrodef>


  <!--=======================================================================
	    maven-publish-artifact

	    A function that deploys an artifact to a maven repository
	    ====================================================================-->
  <macrodef name="maven-publish-artifact">
    <attribute name="file" description="The file that should be published"/>
    <attribute name="pom-file" description="The Maven POM file"/>
    <sequential>
      <fail message="No file found at: @{file}">
        <condition>
          <not>
            <available file="@{file}" />
          </not>
        </condition>
      </fail>
      <echo message="Publishing @{file} to ${ivy.repository.publish}..." />
      <if>
        <isset property="isWindows" />
        <then>
          <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="deploy:deploy-file" />
            <arg value="-DrepositoryId=${ivy.repository.id}" />
            <arg value="-Durl=${ivy.repository.publish}" />
            <arg value="-DpomFile=@{pom-file}" />
            <arg value="-Dfile=@{file}" />
          </exec>
        </then>
        <else>
          <exec executable="mvn" failonerror="true">
            <arg value="deploy:deploy-file" />
            <arg value="-DrepositoryId=${ivy.repository.id}" />
            <arg value="-Durl=${ivy.repository.publish}" />
            <arg value="-DpomFile=@{pom-file}" />
            <arg value="-Dfile=@{file}" />
          </exec>
        </else>
      </if>
    </sequential>
  </macrodef>


  <!--=======================================================================
	    maven-publish-sources

	    A function that deploys a java-sources artifact to a maven repository
	    ====================================================================-->
  <macrodef name="maven-publish-sources">
    <attribute name="file" description="The file that should be published"/>
    <attribute name="group-id" default="${ivy.artifact.group}" description="The maven group-id"/>
    <attribute name="artifact-id" default="${ivy.artifact.id}" description="The maven artifact-id"/>
    <attribute name="version" default="${project.revision}" description="The maven version id"/>
    <sequential>
      <fail message="No file found at: @{file}">
        <condition>
          <not>
            <available file="@{file}" />
          </not>
        </condition>
      </fail>
      <echo message="Publishing @{file} to ${ivy.repository.publish}..." />
      <if>
        <isset property="isWindows" />
        <then>
          <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="deploy:deploy-file" />
            <arg value="-DrepositoryId=${ivy.repository.id}" />
            <arg value="-Durl=${ivy.repository.publish}" />
            <arg value="-DgroupId=@{group-id}" />
            <arg value="-DartifactId=@{artifact-id}" />
            <arg value="-Dversion=@{version}" />
            <arg value="-DgeneratePom=false" />
            <arg value="-Dpackaging=java-source" />
            <arg value="-Dfile=@{file}" />
          </exec>
        </then>
        <else>
          <exec executable="mvn" failonerror="true">
            <arg value="deploy:deploy-file" />
            <arg value="-DrepositoryId=${ivy.repository.id}" />
            <arg value="-Durl=${ivy.repository.publish}" />
            <arg value="-DgroupId=@{group-id}" />
            <arg value="-DartifactId=@{artifact-id}" />
            <arg value="-Dversion=@{version}" />
            <arg value="-DgeneratePom=true" />
            <arg value="-Dpackaging=java-source" />
            <arg value="-Dfile=@{file}" />
          </exec>
        </else>
      </if>
    </sequential>
  </macrodef>


  <!--=======================================================================
	    create-pom

	    Creates the POM file for publishing the jar file to a Maven2 repository.
	    ====================================================================-->
  <target name="create-pom" depends="auto-init-publish,install-ivy" description="Creates a POM file based on the ivy dependencies">
    <ivy:makepom ivyfile="./ivy.xml" pomfile="${dist.dir}/pom.xml">
      <mapping conf="default" scope="compile" />
      <mapping conf="runtime" scope="runtime" />
    </ivy:makepom>
  </target>


  <!--=======================================================================
	    dist-source

	    Generates zip and targz distributions of the sources in a format required by maven.
	    ====================================================================-->
  <target name="dist-source"
          depends="source.jar, source.targz">
    <!-- Generates zip and targz distributions of the project source for publish to maven -->
  </target>


  <!--=======================================================================
	    source.jar

	    Creates a jar of the project source for distribution
	    ====================================================================-->
  <target name="source.jar" depends="auto-init-publish">
    <mkdir dir="${dist.dir}"/>
    <jar jarfile="${dist.dir}/${ivy.artifact.id}-${project.revision}-sources.jar" basedir="${src.dir}" />
  </target>


  <!--=======================================================================
	    source.targz

	    Creates a gzipped tar of the project source for distribution
	    ====================================================================-->
  <target name="source.targz" depends="auto-init-publish">
    <mkdir dir="${dist.dir}"/>
    <tar compression="gzip"
         destfile="${dist.dir}/${ivy.artifact.id}-${project.revision}-sources.tar.gz"
         basedir="${src.dir}" />
  </target>

</project>
