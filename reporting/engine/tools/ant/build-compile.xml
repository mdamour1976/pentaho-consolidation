<!--===========================================================================
    COMMON_BUILD.XML

    This is the build file that is used across all Pentaho projects that are
    using the "new and improved" ivy builds.

    This file contains the default implementation of the ant tasks to
    perform a build. This file should be included by the build.xml file
    for each project in the Pentaho system. That build file should
    redefine any task that is defined in this file IF AND ONLY IF the
    functioning of that task should be different for that specific
    project.

    NOTE: Any modification to this file should be viewed as a modification
          the EVERY common_build.xml file (and the change should be copied
          to all common_build.xml files that can be found)

    FORMATTING:
    	ALIGNMENT: indent=2 spaces and wrap lines longer than 120 chars
    	NAMING: targets intended for execution by a user are named single-word
    	        or hyphenated.  Internal targets use '.' notation.

    TO GET STARTED with your project, you will need this file in
          your project's root directory along with three additional files:
          1. build.xml
          2. build.properties
          3. ivy_settings.xml
          4. ivy.xml

          Below are some templates:

	    === build.xml
		<project name="MyProject" basedir="." default="jar" xmlns:ivy="antlib:org.apache.ivy.ant" >
			<description>
				This build file is used to create the MyProject project and works with the common_build.xml file.
			</description>

			<import file="common_build.xml"/>
		</project>

		=== build.properties
		project.revision=1.0-SNAPSHOT  #the version of your project.  This will appear in jar META-INF, dist artifact filenames and IVY revision metadata.
		ivy.artifact.id=my-project   #IVY metadata describing the name of the artifact
		impl.title=My Project #English language version of your project name

============================================================================-->
<project basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

  <target name="auto-init-compile" if="auto-init.compile.enabled">
    <import file="build-init.xml"/>

    <!-- Setup the compile classpath -->
    <path id="classpath">
      <fileset dir="${lib.dir}">
        <include name="*.jar" />
      </fileset>
      <fileset dir="${devlib.dir}">
        <include name="*.jar" />
      </fileset>
    </path>
  </target>

  <!--=======================================================================
	    clean-jars

	    Removes all the libraries that have been downloaded for this project
	    using the ivy dependencies.
	    ====================================================================-->
  <target name="clean-jars" description="Cleans the libraries that have been downloaded">
    <delete dir="${lib.dir}" />
    <delete dir="${testlib.dir}" />
  </target>

  <target name="clean" depends="clean-bin"/>

  <!--=======================================================================
	    clean

	    Removes all the files generated from the build process.
	    ====================================================================-->
  <target name="clean-bin"
          description="Cleans all the files generated from a build with the exception of IVY-downloaded jars (see clean-all)"
          depends="auto-init-compile,clean-dist">
    <delete dir="${classes.dir}" />
    <delete dir="${bin.dir}" />
  </target>


  <!--=======================================================================
	    clean-dist

	    Removes all dist artifacts
	    ====================================================================-->
  <target name="clean-dist" description="Removes all dist artifacts" depends="auto-init-compile">
    <delete dir="${dist.dir}" />
  </target>


  <!--=======================================================================
	    clean-all

	    Removes all the libraries that have been downloaded for this project
	    in the workspace's lib dirs as well as all the files
	    generated from the build process.
	    ====================================================================-->
  <target name="clean-all" depends="clean,clean-jars" description="Cleans all the generated and dependency files" />


  <!--=======================================================================
	    copy-license-lgpl

	    Copies the LGPL license file into the binary directory.
	    ====================================================================-->
  <target name="copy-license-lgpl"
          if="lgpl-license-avail"
          description="Copies the LGPL license file into the bin directory"
          depends="auto-init-compile">
    <copy todir="${classes.dir}/META-INF">
      <fileset dir="${license.dir}" includes="lgpl-2.1.txt" />
    </copy>
  </target>


  <!--=======================================================================
	    copy-license-gpl-parent

	    Copies the GPL license file from the parent directory into the
	    binary directory.
	    ====================================================================-->
  <target name="copy-license-gpl"
          if="gpl-license-avail"
          description="Copies the GPL license file into the bin directory"
          depends="auto-init-compile">
    <copy todir="${classes.dir}/META-INF">
      <fileset dir="${license.dir}" includes="gpl-2.0.txt" />
    </copy>
  </target>


  <!--=======================================================================
	    compile

	    Compiles the source code (using the specified options) into the
	    binary directory.

	    NOTE: This contains multiple sub-tasks which will occur in the
	          following order (this is provided for easier overriding by
	          the build.xml which will include this file)...
	      - compile.pre      : anything needed to prep for compile
	      - compile.compile  : the actual compilation step
	      - compile.src_copy : copying the source into the bin directory
	      - compile.res_copy : copying the resources into the bin directory
	      - compile.lic_copy : copying the license information into the bin directory
	      - compile.post     : anything needed after the compile is done
	    ====================================================================-->
  <target name="compile"
          depends="auto-init-compile, compile.pre, compile.compile, compile.src_copy, compile.res_copy, compile.lic_copy, compile.post"
          description="Performs all the steps to prepare the bin directory with a complete compilation" />


  <!--=======================================================================
	    compile.pre

	    Prepares to perform the compile.
	    ====================================================================-->
  <target name="compile.pre" description="Prepares the compile" />


  <!--=======================================================================
	    compile.compile

	    Performs the actual compile
	    ====================================================================-->
  <target name="compile.compile" description="Performs the actual javac compile">
    <mkdir dir="${classes.dir}"/>
    <javac destdir="${classes.dir}"
           debug="${javac.debug}"
           deprecation="${javac.deprecation}"
           fork="true"
           source="${javac.source}"
           target="${javac.target}">
      <classpath>
        <path refid="classpath" />
      </classpath>
      <src path="${src.dir}" />
    </javac>
  </target>


  <!--=======================================================================
	    compile.res_copy

	    Copies any needed resources into the classes directory.  Will not
	    duplicate copying of resources from src tree (handled by compile.src_copy
	    if jar.include.source is set.
	    ====================================================================-->
  <target name="compile.res_copy" depends="install-antcontrib">
    <if>
      <available file="${res.dir}" />
      <then>
        <copy todir="${classes.dir}">
          <fileset dir="${res.dir}" />
        </copy>
      </then>
    </if>

    <if>
      <not>
        <isset property="jar.include.source" />
      </not>
      <then>
        <copy todir="${classes.dir}" flatten="false">
          <fileset dir="${src.dir}" excludes="**/*.java" />
        </copy>
      </then>
    </if>
  </target>


  <!--=======================================================================
	    compile.src_copy

	    Copies the source files to the bin directory
	    NOTE: if the dont.copy.source variable exists, this step will be
	          skipped!
	    ====================================================================-->
  <target name="compile.src_copy" if="jar.include.source"
          description="Copies the source to the bin directory">
    <mkdir dir="${classes.dir}"/>
    <copy todir="${classes.dir}" flatten="false">
      <fileset dir="${src.dir}" />
    </copy>
  </target>


  <!--=======================================================================
	    compile.lic_copy

	    Copies the license file(s) into the bin directory
	    ====================================================================-->
  <target name="compile.lic_copy" description="Copies the required license file to the bin directory">
    <condition property="lgpl-license-avail">
      <available file="${license.dir}/lgpl-2.1.txt" />
    </condition>
    <antcall target="copy-license-lgpl" />
    <condition property="gpl-license-avail">
      <available file="${license.dir}/gpl-2.0.txt" />
    </condition>
    <antcall target="copy-license-gpl" />
  </target>


  <!--=======================================================================
	    compile.post

	    Performs any needed post-compile tasks
	    ====================================================================-->
  <target name="compile.post" description="Post compilation tasks" />


  <!--=======================================================================
	    jar

	    Creates a jar file from the bin directory
	    ====================================================================-->
  <target name="jar" depends="auto-init-compile,compile,set-build.id" description="Jars up the bin directory after a compile">
    <jar destfile="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar">
      <manifest>
        <attribute name="Implementation-Title" value="${impl.title}" />
        <attribute name="Implementation-Version" value="${project.revision}.${build.id}" />
        <attribute name="Implementation-Vendor" value="${impl.vendor}" />
        <attribute name="Implementation-ProductID" value="${impl.productID}" />
      </manifest>
      <fileset dir="${classes.dir}" />
    </jar>
  </target>


  <!--=======================================================================
	    dist

	    Creates a distribution of this project
	    ====================================================================-->
  <target name="dist-jar" depends="jar" description="Creates a distribution" />

</project>
